/* Automatically generated nanopb constant definitions */
/* Generated by nanopb-0.3.4 at Tue Dec  8 14:10:06 2015. */

#include "messages.pb.h"

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

const Subscribe_EventType Subscribe_eventType_default = Subscribe_EventType_CHANGED;
const int32_t Subscribe_updateThrottleInSeconds_default = 1;
const Get_ValueType Get_valueType_default = Get_ValueType_FLOAT;


const pb_field_t ServiceMessage_fields[10] = {
    PB_FIELD(  1, INT32   , OPTIONAL, STATIC  , FIRST, ServiceMessage, messageId, messageId, 0),
    PB_ONEOF_FIELD(payload,   2, MESSAGE , ONEOF, STATIC  , OTHER, ServiceMessage, ping, messageId, &Ping_fields),
    PB_ONEOF_FIELD(payload,   3, MESSAGE , ONEOF, STATIC  , OTHER, ServiceMessage, pong, messageId, &Pong_fields),
    PB_ONEOF_FIELD(payload,   4, MESSAGE , ONEOF, STATIC  , OTHER, ServiceMessage, subscribe, messageId, &Subscribe_fields),
    PB_ONEOF_FIELD(payload,   5, MESSAGE , ONEOF, STATIC  , OTHER, ServiceMessage, unsubscribe, messageId, &Unsubscribe_fields),
    PB_ONEOF_FIELD(payload,   6, MESSAGE , ONEOF, STATIC  , OTHER, ServiceMessage, get, messageId, &Get_fields),
    PB_ONEOF_FIELD(payload,   7, MESSAGE , ONEOF, STATIC  , OTHER, ServiceMessage, error, messageId, &Error_fields),
    PB_ONEOF_FIELD(payload,   8, MESSAGE , ONEOF, STATIC  , OTHER, ServiceMessage, floatValue, messageId, &FloatValue_fields),
    PB_ONEOF_FIELD(payload,   9, MESSAGE , ONEOF, STATIC  , OTHER, ServiceMessage, setFloat, messageId, &SetFloat_fields),
    PB_LAST_FIELD
};

const pb_field_t Ping_fields[2] = {
    PB_FIELD(  1, INT32   , REQUIRED, STATIC  , FIRST, Ping, sequenceNumber, sequenceNumber, 0),
    PB_LAST_FIELD
};

const pb_field_t Pong_fields[2] = {
    PB_FIELD(  1, INT32   , REQUIRED, STATIC  , FIRST, Pong, sequenceNumber, sequenceNumber, 0),
    PB_LAST_FIELD
};

const pb_field_t Subscribe_fields[5] = {
    PB_FIELD(  1, STRING  , REQUIRED, CALLBACK, FIRST, Subscribe, path, path, 0),
    PB_FIELD(  2, INT32   , REQUIRED, STATIC  , OTHER, Subscribe, subscriptionId, path, 0),
    PB_FIELD(  3, UENUM   , OPTIONAL, STATIC  , OTHER, Subscribe, eventType, subscriptionId, &Subscribe_eventType_default),
    PB_FIELD(  4, INT32   , OPTIONAL, STATIC  , OTHER, Subscribe, updateThrottleInSeconds, eventType, &Subscribe_updateThrottleInSeconds_default),
    PB_LAST_FIELD
};

const pb_field_t Unsubscribe_fields[2] = {
    PB_FIELD(  1, INT32   , REQUIRED, STATIC  , FIRST, Unsubscribe, subscriptionId, subscriptionId, 0),
    PB_LAST_FIELD
};

const pb_field_t Get_fields[3] = {
    PB_FIELD(  1, STRING  , REQUIRED, STATIC  , FIRST, Get, path, path, 0),
    PB_FIELD(  2, UENUM   , OPTIONAL, STATIC  , OTHER, Get, valueType, path, &Get_valueType_default),
    PB_LAST_FIELD
};

const pb_field_t FloatValue_fields[3] = {
    PB_FIELD(  1, STRING  , REQUIRED, STATIC  , FIRST, FloatValue, path, path, 0),
    PB_FIELD(  2, FLOAT   , REQUIRED, STATIC  , OTHER, FloatValue, value, path, 0),
    PB_LAST_FIELD
};

const pb_field_t SetFloat_fields[3] = {
    PB_FIELD(  1, INT32   , REQUIRED, STATIC  , FIRST, SetFloat, value, value, 0),
    PB_FIELD(  2, STRING  , REQUIRED, STATIC  , OTHER, SetFloat, path, value, 0),
    PB_LAST_FIELD
};

const pb_field_t Error_fields[4] = {
    PB_FIELD(  1, UENUM   , REQUIRED, STATIC  , FIRST, Error, code, code, 0),
    PB_FIELD(  2, STRING  , OPTIONAL, CALLBACK, OTHER, Error, description, code, 0),
    PB_FIELD(  3, INT32   , OPTIONAL, STATIC  , OTHER, Error, messageId, description, 0),
    PB_LAST_FIELD
};


/* Check that field information fits in pb_field_t */
#if !defined(PB_FIELD_32BIT)
/* If you get an error here, it means that you need to define PB_FIELD_32BIT
 * compile-time option. You can do that in pb.h or on compiler command line.
 * 
 * The reason you need to do this is that some of your messages contain tag
 * numbers or field sizes that are larger than what can fit in 8 or 16 bit
 * field descriptors.
 */
PB_STATIC_ASSERT((pb_membersize(ServiceMessage, payload.unsubscribe) < 65536), YOU_MUST_DEFINE_PB_FIELD_32BIT_FOR_MESSAGES_ServiceMessage_Ping_Pong_Subscribe_Unsubscribe_Get_FloatValue_SetFloat_Error)
#endif

#if !defined(PB_FIELD_16BIT) && !defined(PB_FIELD_32BIT)
/* If you get an error here, it means that you need to define PB_FIELD_16BIT
 * compile-time option. You can do that in pb.h or on compiler command line.
 * 
 * The reason you need to do this is that some of your messages contain tag
 * numbers or field sizes that are larger than what can fit in the default
 * 8 bit descriptors.
 */
PB_STATIC_ASSERT((pb_membersize(ServiceMessage, payload.unsubscribe) < 256), YOU_MUST_DEFINE_PB_FIELD_16BIT_FOR_MESSAGES_ServiceMessage_Ping_Pong_Subscribe_Unsubscribe_Get_FloatValue_SetFloat_Error)
#endif


