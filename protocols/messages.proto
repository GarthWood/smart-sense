import "generator/proto/nanopb.proto";

/**
 * Wraps all messages. Useful for clients trying to determine
 * the message type.
 */
message ServiceMessage {
    optional int32 messageId = 1;

    oneof payload {
        Ping ping = 2;
        Pong pong = 3;
        Subscribe subscribe = 4;
        Unsubscribe unsubscribe = 5;
        Get get = 6;
        Error error = 7;
        NumberValue numberValue = 8;
        SetNumber setNumber = 9;
        LogMessage logMessage = 10;
        NumberEvent numberEvent = 11;
    }
}

/**
 * A ping request. The respondent must increment the sequence
 * number and respond with a Pong.
 */
message Ping {
    required int32 sequenceNumber = 1; // Client-specified sequence number
}

/**
 * Reponse to a ping request.
 */
message Pong {
    required int32 sequenceNumber = 1; // The sequence number sent in the ping, incremented by one
}

/**
 * Subscribe to changes on a node value.
 */
message Subscribe {

    required string path = 1; // The path of the firebase node
    required int32 subscriptionId = 2;  // Provided by the caller, used to help them distinguish between multiple subscription requests
    optional EventType eventType = 3 [default = CHANGED]; // The event type to look out for
    optional int32 updateThrottleInSeconds = 4 [default = 1]; // A hint from the client to reduce being spammed by updated
}

/**
 * Unsubscribe from node change events
 */
message Unsubscribe {
    required int32 subscriptionId = 1;
}

/**
 * Get the value at a node
 */
message Get {
    enum ValueType {
        FLOAT = 1;
    }

    required string path = 1 [(nanopb).max_size = 64];
    optional ValueType valueType = 2 [default = FLOAT];
}

message NumberValue {
    required string path = 1 [(nanopb).max_size = 64];
    required int32 value = 2;
}

message SetNumber {
    required string path = 1 [(nanopb).max_size = 64];
    required int32 value = 2;
}

message LogMessage {
    required string deviceId = 1 [(nanopb).max_size = 15];
    required string text = 2 [(nanopb).max_size = 113];
}

message NumberEvent {
    required int32 subscriptionId = 1;
    required EventType eventType = 2;
    required int32 value = 3;
}

message Error {
    enum ErrorCode {
        UNKNOWN_ERROR = 1;
        INTERNAL_ERROR = 2;
        UNKNOWN_MESSAGE_TYPE = 3;
        INVALID_SUBSCRIPTION_EVENT_TYPE = 4;
    }

    required ErrorCode code = 1;
    optional string description = 2;
    optional int32 messageId = 3;
}

/**
 * The event type to subscribe to
 */
enum EventType {
    CHANGED = 1;
}

